#!/usr/bin/env python
# encoding: utf-8
'''
pyanocktail.GpioInputRpi -- GPIO input management module

pyanocktail.GpioInputRpi is a external module for Pianocktail, it intercept GPIO inputs  


@author:     Bertrand Verdu
            
@copyright:  2013 Bertrand Verdu. All rights reserved.
            
@license:    LGPLv2

@contact:    bertrand.verdu@gmail.com
@deffield    updated: Updated
'''

import sys
import os

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2013-12-14'
__updated__ = '2019-12-05'

DEBUG = 0
TESTRUN = 0
PROFILE = 0


def gpio_callback(gpio_id, val):
    '''
    print gpio input to stdout
    '''
    if val == 0:
        print(gpio_id)


def add_port(option, opt_str, value, parser):
    '''
    trick to pass undefined number of values to optparse module
    return a list instead of a tuple
    '''
    args = [value]
    for arg in parser.rargs:
        #         print("arg += %s" % arg)
        if arg[0] != "-":
            args.append(int(arg))
        else:
            del parser.rargs[:len(args)]
            break
    if getattr(parser.values, option.dest):
        args.extend(getattr(parser.values, option.dest))
    setattr(parser.values, option.dest, args)


def main(argv=None):
    '''Command line options.'''
    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (
        program_version, program_build_date)
    # program_usage = '''usage: spam two eggs''' # optional - will be
    # autogenerated by optparse
    program_longdesc = ''''''  # optional - give further explanation about what the program does
    program_license = "Copyright 2013 Bertrand Verdu (organization_name)                                            \
                Licensed under the LGPL 2.0\nhttp://www.gnu.org/licenses/lgpl-2.1.html"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string,
                              epilog=program_longdesc, description=program_license)
        parser.add_option("-i", "--in", dest="ports", action="callback",
                          callback=add_port, help="set watched inputs  [default: %default]")

        # set defaults
        parser.set_defaults(ports=[])

        # process options
        (opts, args) = parser.parse_args(argv)

#         if opts.ports > 0:
#             print("watching ports %r" % opts.ports)

        # MAIN BODY #

    except Exception as e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2

    try:
        '''
        Test if we are on a RaspberryPI
        '''
        import RPIO
    except:
        '''
        Fake inputs for testing on 
        development workstation
        '''
        print('No GPIO interface, sending fake inputs')
        import time
        while True:
            try:
                for port in opts.ports:
                    print(port)
                    time.sleep(30)
            except KeyboardInterrupt:
                break
    else:
        '''
        activate given ports in input mode and wait for events
        '''
        for port in opts.ports:
            RPIO.setup(int(port), RPIO.IN, pull_up_down=RPIO.PUD_UP)
            RPIO.add_interrupt_callback(
                int(port), gpio_callback, edge='falling', pull_up_down=RPIO.PUD_UP)
        try:
            RPIO.wait_for_interrupts()
        except KeyboardInterrupt:
            pass


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'pyanocktail.GpioInputRpi_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())
